{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ConfigParamFormComponent = class ConfigParamFormComponent {\n  constructor(activatedRoute, fb, notification, router, configparamService) {\n    this.activatedRoute = activatedRoute;\n    this.fb = fb;\n    this.notification = notification;\n    this.router = router;\n    this.configparamService = configparamService;\n    this.title = 'Configuração - Parâmetros do sistema'; // ======================================================================================================================\n\n    this.columns = [{\n      property: 'nickname',\n      label: 'Código'\n    }, {\n      property: 'name',\n      label: 'Descrição'\n    }];\n    this.advancedFilters = [{\n      property: 'nickname',\n      divider: 'Selection Informations',\n      optional: true,\n      gridColumns: 6,\n      label: 'Código'\n    }, {\n      property: 'name',\n      optional: true,\n      gridColumns: 6\n    }];\n    const {\n      id\n    } = this.activatedRoute.snapshot.params;\n    this.id = id;\n  }\n\n  ngOnInit() {\n    this.configparamForm = this.fb.group({\n      filial: [''],\n      parametro: [''],\n      conteudo: [''],\n      descricao: ['']\n    });\n    this.loadData(this.id);\n  }\n\n  loadData(id) {\n    this.max = 99;\n    this.step = \"2\";\n    this.maxlength = 5;\n    this.mask = undefined;\n\n    if (id) {\n      this.configparamService.get(id).subscribe(configparam => {\n        this.configparamForm.patchValue(configparam);\n        this.title = \"TESTE FORM_TS\";\n      });\n    }\n  }\n\n  cancel() {\n    window.history.back();\n  }\n\n  save() {\n    if (this.configparamForm.invalid) {\n      this.markAsDirtyInvalidControls(this.configparamForm.controls);\n      this.notification.warning('Formulário precisa ser preenchido corretamente.');\n      return;\n    }\n\n    const configparam = this.configparamForm.value;\n    const operation = !!this.id ? this.configparamService.update(this.id, configparam) : this.configparamService.save(configparam);\n    const successMessage = !!this.id ? 'Configuração de parâmetros atualizado com sucesso' : 'Registro salvo com sucesso';\n    operation.subscribe(() => {\n      this.notification.success(successMessage);\n      this.router.navigate(['app/configparam']);\n    });\n  }\n\n  markAsDirtyInvalidControls(controls) {\n    for (const key in controls) {\n      if (controls.hasOwnProperty(key)) {\n        const control = controls[key];\n\n        if (control.invalid) {\n          control.markAsDirty();\n        }\n      }\n    }\n  }\n\n  fieldFormat(value) {\n    return `${value.label}`; // `${value.nickname} - ${value.label}`;\n  }\n\n};\nConfigParamFormComponent = __decorate([Component({\n  selector: 'app-configparam-form',\n  templateUrl: './configparam-form.component.html',\n  styleUrls: ['./configparam-form.component.css']\n})], ConfigParamFormComponent);\nexport { ConfigParamFormComponent };","map":null,"metadata":{},"sourceType":"module"}