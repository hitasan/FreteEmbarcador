{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@po-ui/ng-components\";\nimport * as i4 from \"../filtroDocCarga.service\";\n\nconst _c0 = function () {\n  return {\n    \"modalTitle\": \"Campo\"\n  };\n};\n\nexport let FiltroDocCargaFormComponent = /*#__PURE__*/(() => {\n  class FiltroDocCargaFormComponent {\n    constructor(activatedRoute, fb, notification, router, filtroDocCargaService) {\n      this.activatedRoute = activatedRoute;\n      this.fb = fb;\n      this.notification = notification;\n      this.router = router;\n      this.filtroDocCargaService = filtroDocCargaService;\n      this.title = 'INCLUIR - Filtros de Documento de Carga';\n      this.isTableLoading = false;\n      this.item = '';\n      this.tabela = 'GW1 - Docto Carga';\n      this.campo = '';\n      this.valor = '';\n      this.acao = '1 - Rejeita';\n      this.tabelaOpt = [{\n        label: 'GW1 - Docto Carga',\n        value: 'GW1 - Docto Carga'\n      }, {\n        label: 'GW8 - Itens',\n        value: 'GW8 - Itens'\n      }, {\n        label: 'GWU - Trechos',\n        value: 'GWU - Trechos'\n      }];\n      this.acaoOpt = [{\n        label: '1 - Rejeita',\n        value: '1 - Rejeita'\n      }, {\n        label: '2 - Bloqueia',\n        value: '2 - Bloqueia'\n      }, {\n        label: '3 - Libera',\n        value: '3 - Libera'\n      }]; // ======================================================================================================================\n      // Funções de controle do lookup\n      // ======================================================================================================================\n\n      this.columns = [{\n        property: 'nickname',\n        label: 'Código'\n      }, {\n        property: 'name',\n        label: 'Descrição'\n      }];\n      this.advancedFilters = [{\n        property: 'nickname',\n        divider: 'Selection Informations',\n        optional: true,\n        gridColumns: 6,\n        label: 'Código'\n      }, {\n        property: 'name',\n        optional: true,\n        gridColumns: 6\n      }];\n      const {\n        id\n      } = this.activatedRoute.snapshot.params;\n      this.id = id;\n    }\n\n    ngOnInit() {\n      this.filtroDocCargaForm = this.fb.group({\n        filial: [''],\n        item: ['', Validators.required],\n        tabela: ['', Validators.required],\n        campo: ['', Validators.required],\n        valor: ['', Validators.required],\n        acao: ['', Validators.required]\n      });\n      this.loadData(this.id);\n    }\n\n    loadData(id) {\n      if (id) {\n        this.filtroDocCargaService.get(id).subscribe(filtroDocCarga => {\n          this.filtroDocCargaForm.patchValue(filtroDocCarga);\n          this.title = \"ALTERAR - Filtros de Documento de Carga\";\n        });\n      }\n    }\n\n    cancel() {\n      window.history.back();\n    }\n\n    save() {\n      if (this.filtroDocCargaForm.invalid) {\n        this.markAsDirtyInvalidControls(this.filtroDocCargaForm.controls);\n        this.notification.warning('Formulário precisa ser preenchido corretamente.');\n        return;\n      }\n\n      const filtroDocCarga = this.filtroDocCargaForm.value;\n      const operation = !!this.id ? this.filtroDocCargaService.update(this.id, filtroDocCarga) : this.filtroDocCargaService.save(filtroDocCarga);\n      const successMessage = !!this.id ? 'Filtro atualizado com sucesso' : 'Filtro salvo com sucesso';\n      operation.subscribe(() => {\n        this.notification.success(successMessage);\n        this.router.navigate(['app/filtroDocCarga']);\n      });\n    }\n\n    markAsDirtyInvalidControls(controls) {\n      for (const key in controls) {\n        if (controls.hasOwnProperty(key)) {\n          const control = controls[key];\n\n          if (control.invalid) {\n            control.markAsDirty();\n          }\n        }\n      }\n    }\n\n    fieldFormat(value) {\n      return `${value.label}`; // `${value.nickname} - ${value.label}`;\n    }\n\n  }\n\n  FiltroDocCargaFormComponent.ɵfac = function FiltroDocCargaFormComponent_Factory(t) {\n    return new (t || FiltroDocCargaFormComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.PoNotificationService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i4.FiltroDocCargaService));\n  };\n\n  FiltroDocCargaFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FiltroDocCargaFormComponent,\n    selectors: [[\"app-filtroDocCarga-form\"]],\n    decls: 7,\n    vars: 13,\n    consts: [[3, \"p-title\", \"p-save\", \"p-cancel\"], [3, \"formGroup\"], [1, \"po-row\"], [\"formControlName\", \"tabela\", \"p-label\", \"Tabela\", \"p-required\", \"\", \"p-clean\", \"\", 1, \"po-lg-2\", 3, \"ngModel\", \"p-options\", \"ngModelChange\"], [\"formControlName\", \"campo\", \"p-label\", \"Campo\", 1, \"po-lg-2\", 3, \"ngModel\", \"p-columns\", \"p-field-format\", \"p-advanced-filters\", \"p-literals\", \"ngModelChange\"], [\"formControlName\", \"valor\", \"p-label\", \"Valor\", \"p-required\", \"\", \"p-clean\", \"\", 1, \"po-lg-5\", 3, \"ngModel\", \"ngModelChange\"], [\"formControlName\", \"acao\", \"p-label\", \"A\\u00E7\\u00E3o\", \"p-required\", \"\", \"p-clean\", \"\", 1, \"po-lg-2\", 3, \"ngModel\", \"p-options\", \"ngModelChange\"]],\n    template: function FiltroDocCargaFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"po-page-edit\", 0);\n        i0.ɵɵlistener(\"p-save\", function FiltroDocCargaFormComponent_Template_po_page_edit_p_save_0_listener() {\n          return ctx.save();\n        })(\"p-cancel\", function FiltroDocCargaFormComponent_Template_po_page_edit_p_cancel_0_listener() {\n          return ctx.cancel();\n        });\n        i0.ɵɵelementStart(1, \"form\", 1)(2, \"div\", 2)(3, \"po-select\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function FiltroDocCargaFormComponent_Template_po_select_ngModelChange_3_listener($event) {\n          return ctx.tabela = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"po-lookup\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function FiltroDocCargaFormComponent_Template_po_lookup_ngModelChange_4_listener($event) {\n          return ctx.campo = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"po-input\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function FiltroDocCargaFormComponent_Template_po_input_ngModelChange_5_listener($event) {\n          return ctx.valor = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"po-select\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function FiltroDocCargaFormComponent_Template_po_select_ngModelChange_6_listener($event) {\n          return ctx.acao = $event;\n        });\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"p-title\", ctx.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.filtroDocCargaForm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.tabela)(\"p-options\", ctx.tabelaOpt);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.campo)(\"p-columns\", ctx.columns)(\"p-field-format\", ctx.fieldFormat)(\"p-advanced-filters\", ctx.advancedFilters)(\"p-literals\", i0.ɵɵpureFunction0(12, _c0));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.valor);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.acao)(\"p-options\", ctx.acaoOpt);\n      }\n    },\n    directives: [i3.PoPageEditComponent, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i3.PoSelectComponent, i2.NgControlStatus, i2.FormControlName, i3.PoLookupComponent, i3.PoInputComponent],\n    styles: [\"\"]\n  });\n  return FiltroDocCargaFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}