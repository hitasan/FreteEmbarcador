{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@po-ui/ng-components\";\nimport * as i4 from \"../cidades.service\";\n\nconst _c0 = function () {\n  return {\n    \"modalTitle\": \"Estados\"\n  };\n};\n\nexport let CidadeFormComponent = /*#__PURE__*/(() => {\n  class CidadeFormComponent {\n    /*\r\n    readonly genreOptions = [\r\n      { value: 'male', label: 'Masculino' },\r\n      { value: 'female', label: 'Feminino' },\r\n      { value: 'another', label: 'Outro' },\r\n    ];\r\n    */\n    constructor(activatedRoute, fb, notification, router, cidadeService) {\n      this.activatedRoute = activatedRoute;\n      this.fb = fb;\n      this.notification = notification;\n      this.router = router;\n      this.cidadeService = cidadeService;\n      this.title = 'Nova cidade'; // ======================================================================================================================\n\n      this.columns = [{\n        property: 'nickname',\n        label: 'Código'\n      }, {\n        property: 'name',\n        label: 'Descrição'\n      }];\n      this.advancedFilters = [{\n        property: 'nickname',\n        divider: 'Selection Informations',\n        optional: true,\n        gridColumns: 6,\n        label: 'Código'\n      }, {\n        property: 'name',\n        optional: true,\n        gridColumns: 6\n      }];\n      const {\n        id\n      } = this.activatedRoute.snapshot.params;\n      this.id = id;\n    }\n\n    ngOnInit() {\n      this.cidadeForm = this.fb.group({\n        cidade: ['', Validators.required],\n        nome: ['', Validators.required],\n        estado: ['', Validators.required],\n        pais: ['', Validators.required],\n        sigla: ['', Validators.required],\n        suframa: [''],\n        cepInicial: [''],\n        cepFinal: [''],\n        percISSFrete: [0],\n        situacao: [''],\n        regiaoRelat: ['']\n      });\n      this.loadData(this.id);\n    }\n\n    loadData(id) {\n      if (id) {\n        this.cidadeService.get(id).subscribe(cidade => {\n          this.cidadeForm.patchValue(cidade);\n          this.title = \"TESTANDO CADASTRO CIDADES\";\n        });\n      }\n    }\n\n    cancel() {\n      window.history.back();\n    }\n\n    save() {\n      if (this.cidadeForm.invalid) {\n        this.markAsDirtyInvalidControls(this.cidadeForm.controls);\n        this.notification.warning('Formulário precisa ser preenchido corretamente.');\n        return;\n      }\n\n      const cidade = this.cidadeForm.value;\n      const operation = !!this.id ? this.cidadeService.update(this.id, cidade) : this.cidadeService.save(cidade);\n      const successMessage = !!this.id ? 'Cidade atualizada com sucesso' : 'Cidade salva com sucesso';\n      operation.subscribe(() => {\n        this.notification.success(successMessage);\n        this.router.navigate(['app/cidades']);\n      });\n    }\n\n    markAsDirtyInvalidControls(controls) {\n      for (const key in controls) {\n        if (controls.hasOwnProperty(key)) {\n          const control = controls[key];\n\n          if (control.invalid) {\n            control.markAsDirty();\n          }\n        }\n      }\n    }\n\n    fieldFormat(value) {\n      return `${value.label}`; // `${value.nickname} - ${value.label}`;\n    }\n\n  }\n\n  CidadeFormComponent.ɵfac = function CidadeFormComponent_Factory(t) {\n    return new (t || CidadeFormComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.PoNotificationService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i4.CidadesService));\n  };\n\n  CidadeFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CidadeFormComponent,\n    selectors: [[\"app-cidade-form\"]],\n    decls: 14,\n    vars: 8,\n    consts: [[3, \"p-title\", \"p-save\", \"p-cancel\"], [3, \"formGroup\"], [1, \"po-row\"], [\"formControlName\", \"cidade\", \"p-label\", \"C\\u00F3digo\", 1, \"po-lg-3\"], [\"formControlName\", \"nome\", \"p-label\", \"Nome\", 1, \"po-lg-6\"], [\"formControlName\", \"estado\", \"p-field-label\", \"label\", \"p-field-value\", \"label\", \"p-label\", \"Estado\", 1, \"po-lg-3\", 3, \"p-columns\", \"p-field-format\", \"p-filter-service\", \"p-advanced-filters\", \"p-literals\"], [\"formControlName\", \"email\", \"p-label\", \"Email\", 1, \"po-md-6\", \"po-lg-4\"], [\"formControlName\", \"birthday\", \"p-label\", \"Date de nascimento\", 1, \"po-md-6\", \"po-lg-4\"], [\"name\", \"cpf\", \"p-mask\", \"999.999.999-99\", \"formControlName\", \"cpf\", \"p-label\", \"CPF\", 1, \"po-md-6\"], [\"p-label\", \"Endere\\u00E7o\"], [\"formControlName\", \"zipcode\", \"p-label\", \"CEP\", 1, \"po-md-6\"], [\"formControlName\", \"address_number\", \"p-label\", \"N\\u00FAmero\", 1, \"po-md-6\"]],\n    template: function CidadeFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"po-page-edit\", 0);\n        i0.ɵɵlistener(\"p-save\", function CidadeFormComponent_Template_po_page_edit_p_save_0_listener() {\n          return ctx.save();\n        })(\"p-cancel\", function CidadeFormComponent_Template_po_page_edit_p_cancel_0_listener() {\n          return ctx.cancel();\n        });\n        i0.ɵɵelementStart(1, \"form\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"po-input\", 3)(4, \"po-input\", 4)(5, \"po-lookup\", 5)(6, \"po-email\", 6)(7, \"po-datepicker\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2);\n        i0.ɵɵelement(9, \"po-input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"po-divider\", 9);\n        i0.ɵɵelementStart(11, \"div\", 2);\n        i0.ɵɵelement(12, \"po-input\", 10)(13, \"po-number\", 11);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"p-title\", ctx.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.cidadeForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"p-columns\", ctx.columns)(\"p-field-format\", ctx.fieldFormat)(\"p-filter-service\", ctx.CidadesService)(\"p-advanced-filters\", ctx.advancedFilters)(\"p-literals\", i0.ɵɵpureFunction0(7, _c0));\n      }\n    },\n    directives: [i3.PoPageEditComponent, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i3.PoInputComponent, i2.NgControlStatus, i2.FormControlName, i3.PoLookupComponent, i3.PoEmailComponent, i3.PoDatepickerComponent, i3.PoDividerComponent, i3.PoNumberComponent],\n    styles: [\"\"]\n  });\n  return CidadeFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}