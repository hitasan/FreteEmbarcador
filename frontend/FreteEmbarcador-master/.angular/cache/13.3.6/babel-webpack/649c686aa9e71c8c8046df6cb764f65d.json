{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@po-ui/ng-components\";\nimport * as i4 from \"../tipoOperacao.service\";\nexport let TipoOperacaoFormComponent = /*#__PURE__*/(() => {\n  class TipoOperacaoFormComponent {\n    constructor(activatedRoute, fb, notification, router, tipoOperacaoService) {\n      this.activatedRoute = activatedRoute;\n      this.fb = fb;\n      this.notification = notification;\n      this.router = router;\n      this.tipoOperacaoService = tipoOperacaoService;\n      this.title = 'INCLUIR - Tipo de Operação';\n      this.isTableLoading = false;\n      this.filial = '';\n      this.tipoOper = '';\n      this.descricao = '';\n      this.sentido = '0 - Todos';\n      this.situacao = '1 - Ativo';\n      this.libRomAut = '0 - Data Informada';\n      this.valePedagio = '1 - Não se aplica';\n      this.sentidoOpt = [{\n        label: '0 - Todos',\n        value: '0 - Todos'\n      }, {\n        label: '1 - Entrada',\n        value: '1 - Entrada'\n      }, {\n        label: '2 - Saida',\n        value: '2 - Saida'\n      }, {\n        label: '3 - Externo',\n        value: '3 - Externo'\n      }, {\n        label: '4 - Interno',\n        value: '4 - Interno'\n      }];\n      this.situacaoOpt = [{\n        label: '1 - Ativo',\n        value: '1 - Ativo'\n      }, {\n        label: '2 - Inativo',\n        value: '2 - Inativo'\n      }];\n      this.libRomAutOpt = [{\n        label: '0 - Data Informada',\n        value: '0 - Data Informada'\n      }, {\n        label: '1 - Data Emissão Doc. Carga',\n        value: '2 - Data Emissao Doc. Carga'\n      }];\n      this.valePedagioOpt = [{\n        label: '1 - Não se aplica',\n        value: '1 - Não se aplica'\n      }, {\n        label: '2 - Opcional',\n        value: '2 - Opcional'\n      }, {\n        label: '3 - Obrigatório',\n        value: '3 - Obrigatório'\n      }]; // ======================================================================================================================\n      // Funções de controle do lookup\n      // ======================================================================================================================\n\n      this.columns = [{\n        property: 'nickname',\n        label: 'Código'\n      }, {\n        property: 'name',\n        label: 'Descrição'\n      }];\n      this.advancedFilters = [{\n        property: 'nickname',\n        divider: 'Selection Informations',\n        optional: true,\n        gridColumns: 6,\n        label: 'Código'\n      }, {\n        property: 'name',\n        optional: true,\n        gridColumns: 6\n      }];\n      const {\n        id\n      } = this.activatedRoute.snapshot.params;\n      this.id = id;\n    }\n\n    ngOnInit() {\n      this.tipoOperacaoForm = this.fb.group({\n        filial: [''],\n        tipoOper: ['', Validators.required],\n        descricao: ['', Validators.required],\n        sentido: ['', Validators.required],\n        situacao: ['', Validators.required],\n        libRomAut: [''],\n        valePedagio: ['']\n      });\n      this.loadData(this.id);\n    }\n\n    loadData(id) {\n      if (id) {\n        this.tipoOperacaoService.get(id).subscribe(tipoOperacao => {\n          this.tipoOperacaoForm.patchValue(tipoOperacao);\n          this.title = \"ALTERAR - Tipo de Operação\";\n        });\n      }\n    }\n\n    cancel() {\n      window.history.back();\n    }\n\n    save() {\n      if (this.tipoOperacaoForm.invalid) {\n        this.markAsDirtyInvalidControls(this.tipoOperacaoForm.controls);\n        this.notification.warning('Formulário precisa ser preenchido corretamente.');\n        return;\n      }\n\n      const tipoOperacao = this.tipoOperacaoForm.value;\n      const operation = !!this.id ? this.tipoOperacaoService.update(this.id, tipoOperacao) : this.tipoOperacaoService.save(tipoOperacao);\n      const successMessage = !!this.id ? 'Tipo de Operação atualizado com sucesso' : 'Tipo de Operação salvo com sucesso';\n      operation.subscribe(() => {\n        this.notification.success(successMessage);\n        this.router.navigate(['app/tipoOperacao']);\n      });\n    }\n\n    markAsDirtyInvalidControls(controls) {\n      for (const key in controls) {\n        if (controls.hasOwnProperty(key)) {\n          const control = controls[key];\n\n          if (control.invalid) {\n            control.markAsDirty();\n          }\n        }\n      }\n    }\n\n    fieldFormat(value) {\n      return `${value.label}`; // `${value.nickname} - ${value.label}`;\n    }\n\n  }\n\n  TipoOperacaoFormComponent.ɵfac = function TipoOperacaoFormComponent_Factory(t) {\n    return new (t || TipoOperacaoFormComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.PoNotificationService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i4.TipoOperacaoService));\n  };\n\n  TipoOperacaoFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TipoOperacaoFormComponent,\n    selectors: [[\"app-tipoOperacao-form\"]],\n    decls: 13,\n    vars: 12,\n    consts: [[3, \"p-title\", \"p-save\", \"p-cancel\"], [3, \"formGroup\"], [1, \"po-row\"], [\"formControlName\", \"tipoOper\", \"p-label\", \"Tipo Oper.\", \"p-required\", \"\", \"p-clean\", \"\", 1, \"po-lg-2\", 3, \"ngModel\", \"ngModelChange\"], [\"formControlName\", \"descricao\", \"p-label\", \"Descri\\u00E7\\u00E3o\", \"p-required\", \"\", \"p-clean\", \"\", 1, \"po-lg-6\", 3, \"ngModel\", \"ngModelChange\"], [\"formControlName\", \"sentido\", \"p-label\", \"Sentido\", 1, \"po-lg-2\", 3, \"ngModel\", \"p-options\", \"ngModelChange\"], [\"formControlName\", \"situacao\", \"p-label\", \"Situa\\u00E7\\u00E3o\", 1, \"po-lg-2\", 3, \"ngModel\", \"p-options\", \"ngModelChange\"], [\"formControlName\", \"libRomAut\", \"p-label\", \"Lib. Rom. Aut.\", 1, \"po-lg-3\", 3, \"ngModel\", \"p-options\", \"ngModelChange\"], [\"formControlName\", \"valePedagio\", \"p-label\", \"Vale Ped\\u00E1gio\", 1, \"po-lg-2\", 3, \"ngModel\", \"p-options\", \"ngModelChange\"]],\n    template: function TipoOperacaoFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"po-page-edit\", 0);\n        i0.ɵɵlistener(\"p-save\", function TipoOperacaoFormComponent_Template_po_page_edit_p_save_0_listener() {\n          return ctx.save();\n        })(\"p-cancel\", function TipoOperacaoFormComponent_Template_po_page_edit_p_cancel_0_listener() {\n          return ctx.cancel();\n        });\n        i0.ɵɵelementStart(1, \"form\", 1)(2, \"div\", 2)(3, \"po-input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function TipoOperacaoFormComponent_Template_po_input_ngModelChange_3_listener($event) {\n          return ctx.tipoOper = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"po-input\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function TipoOperacaoFormComponent_Template_po_input_ngModelChange_4_listener($event) {\n          return ctx.descricao = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"po-select\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function TipoOperacaoFormComponent_Template_po_select_ngModelChange_5_listener($event) {\n          return ctx.sentido = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"po-select\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function TipoOperacaoFormComponent_Template_po_select_ngModelChange_6_listener($event) {\n          return ctx.situacao = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(7, \"br\");\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"po-select\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function TipoOperacaoFormComponent_Template_po_select_ngModelChange_9_listener($event) {\n          return ctx.libRomAut = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"po-select\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function TipoOperacaoFormComponent_Template_po_select_ngModelChange_10_listener($event) {\n          return ctx.valePedagio = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(11, \"br\")(12, \"br\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"p-title\", ctx.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.tipoOperacaoForm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.tipoOper);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.descricao);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.sentido)(\"p-options\", ctx.sentidoOpt);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.situacao)(\"p-options\", ctx.situacaoOpt);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.libRomAut)(\"p-options\", ctx.libRomAutOpt);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.valePedagio)(\"p-options\", ctx.valePedagioOpt);\n      }\n    },\n    directives: [i3.PoPageEditComponent, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i3.PoInputComponent, i2.NgControlStatus, i2.FormControlName, i3.PoSelectComponent],\n    styles: [\"\"]\n  });\n  return TipoOperacaoFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}