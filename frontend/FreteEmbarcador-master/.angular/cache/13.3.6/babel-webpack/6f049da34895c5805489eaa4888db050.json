{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../core/auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@po-ui/ng-templates\";\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n\n    ngOnInit() {} // Agora regra de validação esta totalmente nesse metodo porem para dev e deixar preparado, adicionar tabela de usuario no db.json e usar validação\n    // atraves de API criada por ele (json2ts.com para model da API, ver projeto exemplo de uso)\n\n\n    onLoginSubmit({\n      login,\n      password\n    }) {\n      if (login === 'admin' && password === 'admin') {\n        this.authService.login();\n        this.router.navigate(['/app/home']);\n      }\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 1,\n    vars: 0,\n    consts: [[3, \"p-login-submit\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"po-page-login\", 0);\n        i0.ɵɵlistener(\"p-login-submit\", function LoginComponent_Template_po_page_login_p_login_submit_0_listener($event) {\n          return ctx.onLoginSubmit($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i3.PoPageLoginComponent],\n    styles: [\"\"]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}